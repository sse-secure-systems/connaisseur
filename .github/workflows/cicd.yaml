name: cicd

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install yq
        run: sudo snap install yq
      - name: Build images
        run: make docker
      - name: Save images
        run: |
          mkdir images
          docker save $(yq e '.deployment.image' helm/values.yaml) -o images/${GITHUB_SHA}_image.tar
          docker save $(yq e '.deployment.helmHookImage' helm/values.yaml) -o images/${GITHUB_SHA}_hook.tar
      - uses: actions/upload-artifact@v2
        with:
          name: images
          path: images
          retention-days: 1

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install black
        run: |
          pip3 install setuptools wheel
          pip3 install black
      - name: Verify formatting
        run: |
          python3 -m black . 2>&1 | grep -q "reformatted" && { echo 'Not properly formatted.'; exit 1; } || true

  hadolint:
    runs-on: ubuntu-latest
    container:
      image: hadolint/hadolint:latest-debian
    steps:
      - uses: actions/checkout@v2
      - name: Lint
        run: hadolint docker/Dockerfile

  pylint:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: pip3 install -r requirements_dev.txt
      - name: Lint
        run: cd connaisseur && pylint --ignore-patterns=tests,coverage *.*

  pytest:
    runs-on: ubuntu-latest
    container:
      image: python:slim
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: pip3 install -r requirements_dev.txt && pip3 install .
      - name: Test
        run: cd connaisseur && pytest --cov=connaisseur --cov-report=xml tests/
      - name: Upload code coverage
        uses: codecov/codecov-action@v1
        with:
          file: connaisseur/coverage.xml

  bandit:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install bandit
        run: pip3 install bandit
      - name: Run bandit
        run: bandit -r -x tests/ -f txt -o bandit-report.txt .
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat bandit-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: bandit-report
          path: bandit-report.txt

  safety:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: pip3 install -r requirements_dev.txt
      - name: Freeze packages
        run: pip3 freeze > actual_package_versions.txt
      - name: Install safety
        run: pip3 install safety
      - name: Run safety
        run: safety check -r ./actual_package_versions.txt --full-report -o safety-report.txt
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat safety-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: safety-report
          path: safety-report.txt

  trivy:
    runs-on: ubuntu-latest
    container:
      image: docker:stable
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: images
      - name: Install trivy
        run: |
          apk update
          apk add curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
          mkdir trivy-reports
      - name: Scan Image
        run: trivy image --input ${GITHUB_SHA}_image.tar
                -o trivy-reports/image.txt
                --exit-code 1
                --severity="UNKNOWN,MEDIUM,HIGH,CRITICAL"
      - name: Scan Hook
        run: trivy image --input ${GITHUB_SHA}_hook.tar 
                -o trivy-reports/hook.txt
                --exit-code 1
                --severity="UNKNOWN,MEDIUM,HIGH,CRITICAL"
      - name: Print reports
        if: ${{ success() || failure() }}
        run: |
          cat trivy-reports/image.txt
          cat trivy-reports/hook.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
           name: trivy-reports
           path: trivy-reports

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: images
      - name: Load Docker images
        run: |
          docker load -i ${GITHUB_SHA}_image.tar
          docker load -i ${GITHUB_SHA}_hook.tar
      - name: Install yq and bash
        run: |
          sudo snap install yq
          sudo apt update
          sudo apt install bash -y
      - name: Create KinD cluster
        run: |
          GO111MODULE="on" go get sigs.k8s.io/kind
          kind create cluster --wait 120s
      - name: Check KinD cluster
        run: kubectl get nodes
      - name: Add images to KinD
        run: |
          kind load docker-image $(yq e '.deployment.image' helm/values.yaml)
          kind load docker-image $(yq e '.deployment.helmHookImage' helm/values.yaml)

      - name: Run actual integration test
        run: bash connaisseur/tests/integration/integration-test.sh
