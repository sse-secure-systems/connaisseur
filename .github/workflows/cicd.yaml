name: cicd

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        run: sudo snap install yq
      - name: Build images
        run: make docker
      - name: Save images
        run: |
          mkdir images
          docker save $(yq e '.deployment.image' helm/values.yaml) -o images/${GITHUB_SHA}_image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: images
          path: images
          retention-days: 1

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install black
        run: |
          pip3 install setuptools wheel
          pip3 install black
      - name: Verify formatting
        run: |
          python3 -m black . 2>&1 | grep -q "reformatted" && { echo 'Not properly formatted.'; exit 1; } || true

  kube-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Scan repo
        id: kube-lint-repo
        uses: stackrox/kube-linter-action@v1.0.4
        with:
          directory: helm
          config: .kube-linter/config.yaml

  hadolint:
    runs-on: ubuntu-latest
    container:
      image: hadolint/hadolint:latest-debian
    steps:
      - uses: actions/checkout@v3
      - name: Lint
        run: hadolint docker/Dockerfile

  pylint:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v3
      - name: Install packages
        # Since we run inside an alpine based container, we cannot compile yarl and multidic
        run: YARL_NO_EXTENSIONS=1 MULTIDICT_NO_EXTENSIONS=1 pip3 install -r requirements_dev.txt
      - name: Lint
        run: pylint --ignore-patterns=tests,coverage connaisseur

  pytest:
    runs-on: ubuntu-latest
    container:
      image: python:slim
    steps:
      - uses: actions/checkout@v3
      - name: Install packages
        run: pip3 install -r requirements_dev.txt && pip3 install .
      - name: Install Git and curl
        run: apt update && apt install -y git curl
      - name: Test
        run: pytest --cov=connaisseur --cov-report=xml tests/
      - name: Upload code coverage
        uses: codecov/codecov-action@v3.0.0
        with:
          file: coverage.xml
          fail_ci_if_error: true

  bandit:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v3
      - name: Install Bandit
        run: pip3 install bandit
      - name: Run Bandit
        run: bandit -r -f txt -o bandit-report.txt connaisseur/
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat bandit-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: bandit-report
          path: bandit-report.txt

  safety:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    env:
      YARL_NO_EXTENSIONS: 1
      MULTIDICT_NO_EXTENSIONS: 1
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/safety
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat safety-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: safety-report
          path: safety-report.txt

  trivy-config-scanner:
    name: trivy config scan
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Render Helm charts
        run: |
          mkdir deployment
          helm template helm > deployment/deployment.yaml
      - name: Run Trivy on deployment.yaml
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "deployment"
          hide-progress: false
          format: "table"
          exit-code: "1"
          ignore-unfixed: false
          severity: "CRITICAL,HIGH"
      - name: Run Trivy on Dockerfiles
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "docker"
          hide-progress: false
          format: "table"
          exit-code: "1"
          ignore-unfixed: false
          severity: "CRITICAL,HIGH"

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"
      - name: build
        run: |
          pip install -r docs/requirements_docs.txt
          mkdocs build

  trivy-vuln-scan:
    name: trivy vuln scan
    runs-on: ubuntu-latest
    container:
      image: docker:stable
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
        with:
          name: images
      - uses: ./.github/actions/trivy
      - name: Print reports
        if: ${{ success() || failure() }}
        run: |
          cat trivy-reports/image.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: trivy-reports
          path: trivy-reports

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        integration-test-arg:
          [
            "complexity",
            "load",
            "regular",
            "cosign",
            "multi-cosigned",
            "namespace-val",
            "deployment",
            "pre-config",
          ]
    services:
      alerting-endpoint:
        image: securesystemsengineering/alerting-endpoint
        ports:
          - 56243:56243
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        run: |
          sudo snap install yq
      - uses: actions/download-artifact@v2
        with:
          name: images
      - uses: ./.github/actions/k8s-version-config
        name: Setup k8s cluster
        with:
          k8s-version: v1.22
      - name: Load Image
        run: |
          sudo k3s ctr images import ${GITHUB_SHA}_image.tar
        shell: bash
      - name: Set environment variables for alerting listener
        run: |
          CONTAINER=$(docker container ls --no-trunc --format "{{json . }}" | jq ' . | select(.Image|match("alerting-endpoint"))')
          CONTAINER_ID=$(echo ${CONTAINER} | jq -r .ID)
          CONTAINER_NETWORK=$(echo ${CONTAINER} | jq -r .Networks)
          SEARCH_PATH=.[0].NetworkSettings.Networks.${CONTAINER_NETWORK}.IPAddress
          ALERTING_ENDPOINT_IP=$(docker container inspect ${CONTAINER_ID} | jq -r ${SEARCH_PATH})
          echo ALERTING_ENDPOINT_IP=${ALERTING_ENDPOINT_IP} >> $GITHUB_ENV
      - name: Show Connaisseur configuration
        run: |
          echo "::group::values.yaml"
          yq e '.' helm/values.yaml
          echo "::endgroup::"
        shell: bash
      - name: Run actual integration test
        run: |
          bash tests/integration/integration-test.sh "${{ matrix.integration-test-arg }}"
        shell: bash
      - name: Display k8s logs if integration test failed
        if: failure()
        run: |
          kubectl logs -n connaisseur -lapp.kubernetes.io/name=connaisseur --prefix=true
        shell: bash

  k8s-versions:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        k8s-version:
          ["v1.16", "v1.17", "v1.18", "v1.19", "v1.20", "v1.21", "v1.22", "v1.23"]
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        run: |
          sudo snap install yq
      - uses: actions/download-artifact@v2
        with:
          name: images
      - uses: ./.github/actions/k8s-version-config
        name: Setup k8s cluster
        with:
          k8s-version: ${{ matrix.k8s-version }}
      - name: Configure Connaisseur
        run: |
          yq e '.deployment.imagePullPolicy = "Never"' -i helm/values.yaml
          yq e '.policy +={"pattern": "docker.io/securesystemsengineering/connaisseur:v*"} | .policy[4].pattern style="double"' -i helm/values.yaml
          yq e '.policy[4].validator = "allow"' -i helm/values.yaml
          yq e '.deployment.replicasCount = "1"' -i helm/values.yaml
      - name: Run pre-config and workload integration tests
        run: |
          bash tests/integration/integration-test.sh "pre-and-workload"
        shell: bash
      - name: Display k8s logs if integration test failed
        if: failure()
        run: |
          kubectl logs -n connaisseur -lapp.kubernetes.io/name=connaisseur --prefix=true
        shell: bash

  upgrade-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Install yq and bash
        run: |
          sudo snap install yq
          sudo apt update
          sudo apt install bash -y
        shell: bash
      - uses: actions/download-artifact@v2
        with:
          name: images
      - name: Load Docker images
        run: |
          docker load -i ${GITHUB_SHA}_image.tar
        shell: bash
      - uses: ./.github/actions/k8s-version-config
        name: Setup k8s cluster
        with:
          k8s-version: v1.22
      - uses: actions/checkout@v3
        with:
          ref: "master"
      - name: Configure Connaisseur (master)
        run: |
          yq e '.detectionMode=true' -i helm/values.yaml
      - name: Install Connaisseur (master)
        run: |
          make install
      - name: Get image name & version (master)
        run: |
          kubectl get pods -n connaisseur -o jsonpath="{.items[*].spec.containers[*].image}"
      - name: Run integration tests (master)
        run: |
          bash tests/integration/upgrade-integration-test.sh
        shell: bash
      - name: Display k8s logs if integration test failed
        if: failure()
        run: |
          kubectl logs -n connaisseur -lapp.kubernetes.io/name=connaisseur --prefix=true
        shell: bash
      - uses: actions/checkout@v3
      - name: Upgrade Connaisseur to current branch
        run: |
          make upgrade
      - name: Get image name & version (branch)
        run: |
          kubectl get pods -n connaisseur -o jsonpath="{.items[*].spec.containers[*].image}"
      - name: Run integration tests (branch)
        run: |
          bash tests/integration/upgrade-integration-test.sh
        shell: bash
      - name: Display k8s logs if integration test failed
        if: failure()
        run: |
          kubectl logs -n connaisseur -lapp.kubernetes.io/name=connaisseur --prefix=true
        shell: bash
      - name: Uninstall Connaisseur
        run: |
          make uninstall
