name: cicd

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install yq
        run: sudo snap install yq
      - name: Build images
        run: make docker
      - name: Save images
        run: |
          mkdir images
          docker save $(yq e '.deployment.image' helm/values.yaml) -o images/${GITHUB_SHA}_image.tar
          docker save $(yq e '.deployment.helmHookImage' helm/values.yaml) -o images/${GITHUB_SHA}_hook.tar
      - uses: actions/upload-artifact@v2
        with:
          name: images
          path: images
          retention-days: 1

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install black
        run: |
          pip3 install setuptools wheel
          pip3 install black
      - name: Verify formatting
        run: |
          python3 -m black . 2>&1 | grep -q "reformatted" && { echo 'Not properly formatted.'; exit 1; } || true

  hadolint:
    runs-on: ubuntu-latest
    container:
      image: hadolint/hadolint:latest-debian
    steps:
      - uses: actions/checkout@v2
      - name: Lint
        run: hadolint docker/Dockerfile

  pylint:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        # Since we run inside an alpine based container, we cannot compile yarl and multidic
        run: YARL_NO_EXTENSIONS=1 MULTIDICT_NO_EXTENSIONS=1 pip3 install -r requirements_dev.txt
      - name: Lint
        run: cd connaisseur && pylint --ignore-patterns=tests,coverage *.*

  pytest:
    runs-on: ubuntu-latest
    container:
      image: python:slim
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: pip3 install -r requirements_dev.txt && pip3 install .
      - name: Install git and curl
        run: apt update && apt install -y git curl
      - name: Test
        run: pytest --cov=connaisseur --cov-report=xml tests/
      - name: Upload code coverage
        uses: codecov/codecov-action@v2.0.2
        with:
          file: coverage.xml
          fail_ci_if_error: true

  bandit:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install bandit
        run: pip3 install bandit
      - name: Run bandit
        run: bandit -r -f txt -o bandit-report.txt connaisseur/
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat bandit-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: bandit-report
          path: bandit-report.txt

  safety:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    env:
      YARL_NO_EXTENSIONS: 1
      MULTIDICT_NO_EXTENSIONS: 1
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/safety
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat safety-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: safety-report
          path: safety-report.txt

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: build
        run: |
          pip install -r docs/requirements_docs.txt
          mkdocs build

  trivy:
    runs-on: ubuntu-latest
    container:
      image: docker:stable
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: images
      - uses: ./.github/actions/trivy
      - name: Print reports
        if: ${{ success() || failure() }}
        run: |
          cat trivy-reports/image.txt
          cat trivy-reports/hook.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
           name: trivy-reports
           path: trivy-reports

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        integration-test-script: [ 'integration-test.sh', 'preconfig-integration-test.sh', 'cosign-integration-test.sh', 'namespaced-integration-test.sh']
    services:
      alerting-endpoint:
        image: securesystemsengineering/alerting-endpoint
        ports:
          - 56243:56243
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: images
      - name: Load Docker images
        run: |
          docker load -i ${GITHUB_SHA}_image.tar
          docker load -i ${GITHUB_SHA}_hook.tar
        shell: bash
      - uses: ./.github/actions/integration-test
        with:
          integration-test-script: ${{ matrix.integration-test-script }}


