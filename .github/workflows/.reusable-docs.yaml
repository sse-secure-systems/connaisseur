name: docs

permissions: {}

on:
  workflow_call:
    inputs:
      skip:
        description: "Want to skip running certain jobs 'none', 'non-required', 'all'?"
        type: string
        default: "none"
      application_version:
        description: "Version of the Connaisseur application (same as Git release tag, without v prefix)"
        type: string
      latest_docs:
        description: "Whether the docs corresponding to the application version are to be marked as latest docs"
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: inputs.skip != 'all'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
            fetch-depth: 0
      - name: Set release env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Configure the git user
        run: |
          git config user.name "versioning_user"
          git config user.email "connaisseur@securesystems.dev"
      - name: Install
        run: |
          pip install -r docs/requirements_docs.txt
      - name: Deploy
        if: inputs.skip != 'non-required'
        run: |
          if [[ "${GITHUB_REF}" == "refs/tags/v"* ]];
          then
            echo "Releasing latest docs ${RELEASE_VERSION}..."
            mike deploy --push --update-aliases ${RELEASE_VERSION} latest
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo 'Releasing docs for develop...'
            mike deploy --push ${RELEASE_VERSION}
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && -n "${{ inputs.application_version }}" && -n "${{ inputs.latest_docs }}" ]]; then
            LATEST="${{ inputs.latest_docs }}"
            DOCS_VERSION="v${{ inputs.application_version }}" # Add v prefix
            if [[ "${LATEST}" == "true" ]]; then
              echo "Manual release of docs for version ${DOCS_VERSION} as latest..."
               mike deploy --push --update-aliases ${DOCS_VERSION} latest
            else
              echo "Manual release of docs for version ${DOCS_VERSION}..."
              mike deploy --push ${DOCS_VERSION}
            fi
          else
            echo 'Building docs...'
            mkdocs build
          fi
