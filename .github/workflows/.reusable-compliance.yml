name: compliance

on:
  workflow_call:

permissions: read-all

jobs:
  ossf-scorecard:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'master' || github.event_name == 'pull_request' }}
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          persist-credentials: false
      - name: Analyze
        uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736 # v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.SCORECARD_TOKEN }}
          publish_results: ${{ github.ref_name == 'master' }}
      - name: Upload
        uses: github/codeql-action/upload-sarif@47b3d888fe66b639e431abf22ebca059152f1eea # v3.24.5
        with:
          sarif_file: results.sarif

  dependency-review:
    name: dependency review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Review
        uses: actions/dependency-review-action@9129d7d40b8c12c1ed0f60400d00c92d437adcce # v4.1.3

  check-commit-message:
    runs-on: ubuntu-latest
    permissions: {}
    if: ${{ github.event_name == 'pull_request' }} # Only run on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }} # Otherwise will checkout merge commit, which isn't conform
          fetch-depth: ${{ github.event.pull_request.commits }} # Fetch all commits of the MR, but only those
      - name: Check commit messages for conformity
        run: |
          echo "Commits between dev branch and current SHA:"
          COMMITS=$(git log --pretty=%H)
          echo "${COMMITS}"
          EXIT=0
          COMMIT_MSGS=$(git log --pretty=%s) # show subject only
          for commit in ${COMMITS}; do
              MSG=$(git log ${commit} -n1 --pretty=%s)
              TYPE=$(echo ${MSG} | awk '{{ print $1 }}')
              if ! [[ "${TYPE}" =~ ^(build|ci|docs|feat|fix|refactor|sec|test|update):$ ]]; then
                EXIT=1
                echo "Commit message of commit ${commit} doesn't conform to 'type: msg' format:"
                echo "${MSG}"
                echo "-------------------------"
              fi
          done
          exit ${EXIT}
