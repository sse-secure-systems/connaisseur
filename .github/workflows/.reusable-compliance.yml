name: compliance

on:
  workflow_call:

permissions: read-all

jobs:
  ossf-scorecard:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'master' || github.event_name == 'pull_request' }}
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          persist-credentials: false
      - name: Analyze
        uses: ossf/scorecard-action@08b4669551908b1024bb425080c797723083c031 # v2.2.0
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.SCORECARD_TOKEN }}
          publish_results: ${{ github.ref_name == 'master' }}
      - name: Upload
        uses: github/codeql-action/upload-sarif@ddccb873888234080b77e9bc2d4764d5ccaaccf9 # v2.21.9
        with:
          sarif_file: results.sarif

  dependency-review:
    name: dependency review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
      - name: Review
        uses: actions/dependency-review-action@f6fff72a3217f580d5afd49a46826795305b63c7 # v3.0.8

  check-commit-message:
    runs-on: ubuntu-latest
    permissions: {}
    if: ${{ github.event_name == 'pull_request' }} # Only run on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          ref: ${{ github.event.pull_request.head.sha }} # Otherwise will checkout merge commit, which isn't conform
          fetch-depth: ${{ github.event.pull_request.commits }} # Fetch all commits of the MR, but only those
      - name: Check commit messages for conformity
        run: |
          echo "Commits between dev branch and current SHA:"
          COMMITS=$(git log --pretty=%H)
          echo "${COMMITS}"
          EXIT=0
          COMMIT_MSGS=$(git log --pretty=%s) # show subject only
          for commit in ${COMMITS}; do
              MSG=$(git log ${commit} -n1 --pretty=%s)
              TYPE=$(echo ${MSG} | awk '{{ print $1 }}')
              if ! [[ "${TYPE}" =~ ^(build|ci|docs|feat|fix|refactor|test|update):$ ]]; then
                EXIT=1
                echo "Commit message of commit ${commit} doesn't conform to 'type: msg' format:"
                echo "${MSG}"
                echo "-------------------------"
              fi
          done
          exit ${EXIT}
